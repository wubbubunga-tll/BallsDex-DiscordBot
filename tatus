[1mdiff --git a/ballsdex/__init__.py b/ballsdex/__init__.py[m
[1mindex 2b2885b..9d79e3a 100755[m
[1m--- a/ballsdex/__init__.py[m
[1m+++ b/ballsdex/__init__.py[m
[36m@@ -1 +1 @@[m
[31m-__version__ = "2.17.1"[m
[32m+[m[32m__version__ = "2.18.0"[m[41m[m
[1mdiff --git a/ballsdex/core/bot.py b/ballsdex/core/bot.py[m
[1mindex 809cb7f..8e03ec6 100755[m
[1m--- a/ballsdex/core/bot.py[m
[1m+++ b/ballsdex/core/bot.py[m
[36m@@ -45,7 +45,7 @@[m [mif TYPE_CHECKING:[m
 log = logging.getLogger("ballsdex.core.bot")[m
 http_counter = Histogram("discord_http_requests", "HTTP requests", ["key", "code"])[m
 [m
[31m-PACKAGES = ["config", "players", "countryballs", "info", "admin", "trade", "balls"][m
[32m+[m[32mPACKAGES = ["config", "players", "countryballs", "info", "admin", "trade", "balls", "rarity", "claim", "leaderboard", "suggest_ability", "training"][m[41m[m
 [m
 [m
 def owner_check(ctx: commands.Context[BallsDexBot]):[m
[36m@@ -129,7 +129,7 @@[m [mclass BallsDexBot(commands.AutoShardedBot):[m
         # guild_messages: spawning is based on messages sent, content is not necessary[m
         # emojis_and_stickers: DB holds emoji IDs for the balls which are fetched from 3 servers[m
         intents = discord.Intents([m
[31m-            guilds=True, guild_messages=True, emojis_and_stickers=True, message_content=True[m
[32m+[m[32m            guilds=True, guild_messages=True, emojis_and_stickers=True[m[41m[m
         )[m
 [m
         if settings.prometheus_enabled:[m
[1mdiff --git a/ballsdex/core/commands.py b/ballsdex/core/commands.py[m
[1mindex b0df0ad..83c9094 100755[m
[1m--- a/ballsdex/core/commands.py[m
[1m+++ b/ballsdex/core/commands.py[m
[36m@@ -2,6 +2,8 @@[m [mimport logging[m
 import time[m
 from typing import TYPE_CHECKING[m
 [m
[32m+[m[32mimport discord[m[41m[m
[32m+[m[32mfrom discord import app_commands[m[41m[m
 from discord.ext import commands[m
 from tortoise import Tortoise[m
 [m
[36m@@ -13,34 +15,28 @@[m [mif TYPE_CHECKING:[m
 [m
 class Core(commands.Cog):[m
     """[m
[31m-    Core commands of BallsDex bot[m
[32m+[m[32m    Core commands of BallsDexBot[m[41m[m
     """[m
 [m
     def __init__(self, bot: "BallsDexBot"):[m
         self.bot = bot[m
 [m
[31m-    @commands.command()[m
[31m-    async def ping(self, ctx: commands.Context):[m
[31m-        """[m
[31m-        Ping![m
[31m-        """[m
[31m-        await ctx.send("Pong")[m
[32m+[m[32m    @app_commands.command(name="ping")[m[41m[m
[32m+[m[32m    async def ping(self, interaction: discord.Interaction):[m[41m[m
[32m+[m[32m        """Ping!"""[m[41m[m
[32m+[m[32m        await interaction.response.send_message("Pong")[m[41m[m
 [m
[31m-    @commands.command()[m
[32m+[m[32m    @app_commands.command(name="reloadtree")[m[41m[m
     @commands.is_owner()[m
[31m-    async def reloadtree(self, ctx: commands.Context):[m
[31m-        """[m
[31m-        Sync the application commands with Discord[m
[31m-        """[m
[32m+[m[32m    async def reloadtree(self, interaction: discord.Interaction):[m[41m[m
[32m+[m[32m        """Sync the application commands with Discord"""[m[41m[m
         await self.bot.tree.sync()[m
[31m-        await ctx.send("Application commands tree reloaded.")[m
[32m+[m[32m        await interaction.response.send_message("Application commands tree reloaded.")[m[41m[m
 [m
[31m-    @commands.command()[m
[32m+[m[32m    @app_commands.command(name="reload")[m[41m[m
     @commands.is_owner()[m
[31m-    async def reload(self, ctx: commands.Context, package: str):[m
[31m-        """[m
[31m-        Reload an extension[m
[31m-        """[m
[32m+[m[32m    async def reload(self, interaction: discord.Interaction, package: str):[m[41m[m
[32m+[m[32m        """Reload an extension"""[m[41m[m
         package = "ballsdex.packages." + package[m
         try:[m
             try:[m
[36m@@ -48,16 +44,16 @@[m [mclass Core(commands.Cog):[m
             except commands.ExtensionNotLoaded:[m
                 await self.bot.load_extension(package)[m
         except commands.ExtensionNotFound:[m
[31m-            await ctx.send("Extension not found")[m
[32m+[m[32m            await interaction.response.send_message("Extension not found")[m[41m[m
         except Exception:[m
[31m-            await ctx.send("Failed to reload extension.")[m
[32m+[m[32m            await interaction.response.send_message("Failed to reload extension.")[m[41m[m
             log.error(f"Failed to reload extension {package}", exc_info=True)[m
         else:[m
[31m-            await ctx.send("Extension reloaded.")[m
[32m+[m[32m            await interaction.response.send_message("Extension reloaded.")[m[41m[m
 [m
[31m-    @commands.command()[m
[32m+[m[32m    @app_commands.command(name="reloadcache")[m[41m[m
     @commands.is_owner()[m
[31m-    async def reloadcache(self, ctx: commands.Context):[m
[32m+[m[32m    async def reloadcache(self, interaction: discord.Interaction):[m[41m[m
         """[m
         Reload the cache of database models.[m
 [m
[36m@@ -65,11 +61,11 @@[m [mclass Core(commands.Cog):[m
         next start.[m
         """[m
         await self.bot.load_cache()[m
[31m-        await ctx.message.add_reaction("✅")[m
[32m+[m[32m        await interaction.response.send_message("✅ Cache reloaded")[m[41m[m
 [m
[31m-    @commands.command()[m
[31m-    @commands.is_owner()[m
[31m-    async def analyzedb(self, ctx: commands.Context):[m
[32m+[m[32m    @app_commands.command(name="analyzedb")[m[41m[m
[32m+[m[32m    @app_commands.check(lambda interaction: interaction.user.id == interaction.client.owner_id)[m[41m[m
[32m+[m[32m    async def analyzedb(self, interaction: discord.Interaction):[m[41m[m
         """[m
         Analyze the database. This refreshes the counts displayed by the `/about` command.[m
         """[m
[36m@@ -77,4 +73,4 @@[m [mclass Core(commands.Cog):[m
         t1 = time.time()[m
         await connection.execute_query("ANALYZE")[m
         t2 = time.time()[m
[31m-        await ctx.send(f"Analyzed database in {round((t2 - t1) * 1000)}ms.")[m
[32m+[m[32m        await interaction.response.send_message(f"Analyzed database in {round((t2 - t1) * 1000)}ms.")[m
\ No newline at end of file[m
[1mdiff --git a/ballsdex/core/image_generator/image_gen.py b/ballsdex/core/image_generator/image_gen.py[m
[1mindex 472dcac..b54e9ee 100755[m
[1m--- a/ballsdex/core/image_generator/image_gen.py[m
[1m+++ b/ballsdex/core/image_generator/image_gen.py[m
[36m@@ -2,29 +2,54 @@[m [mimport os[m
 import textwrap[m
 from pathlib import Path[m
 from typing import TYPE_CHECKING[m
[31m-[m
 from PIL import Image, ImageDraw, ImageFont, ImageOps[m
 [m
 if TYPE_CHECKING:[m
     from ballsdex.core.models import BallInstance[m
 [m
[31m-[m
 SOURCES_PATH = Path(os.path.dirname(os.path.abspath(__file__)), "./src")[m
 WIDTH = 1500[m
 HEIGHT = 2000[m
[31m-[m
 RECTANGLE_WIDTH = WIDTH - 40[m
 RECTANGLE_HEIGHT = (HEIGHT // 5) * 2[m
[31m-[m
 CORNERS = ((34, 261), (1393, 992))[m
 artwork_size = [b - a for a, b in zip(*CORNERS)][m
 [m
[31m-title_font = ImageFont.truetype(str(SOURCES_PATH / "ArsenicaTrial-Extrabold.ttf"), 170)[m
[31m-capacity_name_font = ImageFont.truetype(str(SOURCES_PATH / "Bobby Jones Soft.otf"), 110)[m
[31m-capacity_description_font = ImageFont.truetype(str(SOURCES_PATH / "OpenSans-Semibold.ttf"), 75)[m
[31m-stats_font = ImageFont.truetype(str(SOURCES_PATH / "Bobby Jones Soft.otf"), 130)[m
[31m-credits_font = ImageFont.truetype(str(SOURCES_PATH / "arial.ttf"), 40)[m
[32m+[m[32mtitle_font = ImageFont.truetype(str(SOURCES_PATH / "Hobeaux-Bold.ttf"), 170)[m[41m[m
[32m+[m[32mcapacity_name_font = ImageFont.truetype(str(SOURCES_PATH / "Hobeaux-Bold.ttf"), 110)[m[41m[m
[32m+[m[32mcapacity_description_font = ImageFont.truetype(str(SOURCES_PATH / "CooperFiveOpti-Black.ttf"), 75)[m[41m[m
[32m+[m[32mstats_font = ImageFont.truetype(str(SOURCES_PATH / "Hobeaux-Bold.ttf"), 130)[m[41m[m
[32m+[m[32mcredits_font = ImageFont.truetype(str(SOURCES_PATH / "OpenSans-Semibold.ttf"), 40)[m[41m[m
 [m
[32m+[m[32mdef get_scaled_font_size(text: str, max_width: int, max_height: int, font_path: str, starting_size: int, min_size: int = 40) -> tuple[int, list[str]]:[m[41m[m
[32m+[m[32m    font_size = starting_size[m[41m[m
[32m+[m[32m    font = ImageFont.truetype(str(font_path), font_size)[m[41m[m
[32m+[m[32m    dummy_draw = ImageDraw.Draw(Image.new('RGBA', (1, 1)))[m[41m[m
[32m+[m[32m    wrapped_text = textwrap.wrap(text, width=28)[m[41m[m
[32m+[m[41m    [m
[32m+[m[32m    if len(wrapped_text) >= 4:[m[41m[m
[32m+[m[32m        font_size = max(min_size, starting_size - (10 * (len(wrapped_text) - 4)))[m[41m[m
[32m+[m[32m        font = ImageFont.truetype(str(font_path), font_size)[m[41m[m
[32m+[m[32m        wrapped_text = textwrap.wrap(text, width=25)[m[41m[m
[32m+[m[32m        while len(wrapped_text) > 7:[m[41m[m
[32m+[m[32m            font_size -= 2[m[41m[m
[32m+[m[32m            if font_size < min_size:[m[41m[m
[32m+[m[32m                font_size = min_size[m[41m[m
[32m+[m[32m                break[m[41m[m
[32m+[m[32m            font = ImageFont.truetype(str(font_path), font_size)[m[41m[m
[32m+[m[32m            wrapped_text = textwrap.wrap(text, width=25)[m[41m[m
[32m+[m[32m    else:[m[41m[m
[32m+[m[32m        text_height = len(wrapped_text) * font_size * 1.1[m[41m[m
[32m+[m[32m        while text_height > max_height or any(dummy_draw.textlength(line, font=font) > max_width for line in wrapped_text):[m[41m[m
[32m+[m[32m            font_size -= 2[m[41m[m
[32m+[m[32m            if font_size < min_size:[m[41m[m
[32m+[m[32m                font_size = min_size[m[41m[m
[32m+[m[32m                break[m[41m[m
[32m+[m[32m            font = ImageFont.truetype(str(font_path), font_size)[m[41m[m
[32m+[m[32m            wrapped_text = textwrap.wrap(text, width=28)[m[41m[m
[32m+[m[32m            text_height = len(wrapped_text) * font_size * 1.1[m[41m[m
[32m+[m[41m    [m
[32m+[m[32m    return font_size, wrapped_text[m[41m[m
 [m
 def draw_card(ball_instance: "BallInstance"):[m
     ball = ball_instance.countryball[m
[36m@@ -37,38 +62,66 @@[m [mdef draw_card(ball_instance: "BallInstance"):[m
         image = Image.open("." + special_image)[m
     else:[m
         image = Image.open("." + ball.cached_regime.background)[m
[32m+[m[41m    [m
     image = image.convert("RGBA")[m
[31m-    icon = ([m
[31m-        Image.open("." + ball.cached_economy.icon).convert("RGBA") if ball.cached_economy else None[m
[31m-    )[m
[32m+[m[32m    icon = Image.open("." + ball.cached_economy.icon).convert("RGBA") if ball.cached_economy else None[m[41m[m
 [m
     draw = ImageDraw.Draw(image)[m
     draw.text((50, 20), ball.short_name or ball.country, font=title_font)[m
[31m-    for i, line in enumerate(textwrap.wrap(f"Ability: {ball.capacity_name}", width=26)):[m
[32m+[m[41m[m
[32m+[m[32m    ability_text = f"Ability: {ball.capacity_name}"[m[41m[m
[32m+[m[32m    ability_font_size, wrapped_ability = get_scaled_font_size([m[41m[m
[32m+[m[32m        ability_text,[m[41m[m
[32m+[m[32m        RECTANGLE_WIDTH - 150,[m[41m[m
[32m+[m[32m        200,[m[41m[m
[32m+[m[32m        SOURCES_PATH / "Hobeaux-Bold.ttf",[m[41m[m
[32m+[m[32m        110,[m[41m[m
[32m+[m[32m        90[m[41m[m
[32m+[m[32m    )[m[41m[m
[32m+[m[32m    dynamic_ability_font = ImageFont.truetype(str(SOURCES_PATH / "Hobeaux-Bold.ttf"), ability_font_size)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    desc_font_size, wrapped_desc = get_scaled_font_size([m[41m[m
[32m+[m[32m        ball.capacity_description,[m[41m[m
[32m+[m[32m        RECTANGLE_WIDTH - 120,[m[41m[m
[32m+[m[32m        300,[m[41m[m
[32m+[m[32m        SOURCES_PATH / "CooperFiveOpti-Black.ttf",[m[41m[m
[32m+[m[32m        75,[m[41m[m
[32m+[m[32m        60[m[41m[m
[32m+[m[32m    )[m[41m[m
[32m+[m[32m    dynamic_desc_font = ImageFont.truetype(str(SOURCES_PATH / "CooperFiveOpti-Black.ttf"), desc_font_size)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    ability_y = 1050[m[41m[m
[32m+[m[32m    line_spacing = 1.05 if len(wrapped_ability) >= 5 else 1.1[m[41m[m
[32m+[m[32m    for i, line in enumerate(wrapped_ability):[m[41m[m
         draw.text([m
[31m-            (100, 1050 + 100 * i),[m
[32m+[m[32m            (50, ability_y + (i * ability_font_size * line_spacing)),[m[41m[m
             line,[m
[31m-            font=capacity_name_font,[m
[32m+[m[32m            font=dynamic_ability_font,[m[41m[m
             fill=(230, 230, 230, 255),[m
             stroke_width=2,[m
[31m-            stroke_fill=(0, 0, 0, 255),[m
[32m+[m[32m            stroke_fill=(0, 0, 0, 255)[m[41m[m
         )[m
[31m-    for i, line in enumerate(textwrap.wrap(ball.capacity_description, width=32)):[m
[32m+[m[41m[m
[32m+[m[32m    desc_y = ability_y + (len(wrapped_ability) * ability_font_size * line_spacing) + 50[m[41m[m
[32m+[m[32m    desc_spacing = 1.05 if len(wrapped_desc) >= 5 else 1.1[m[41m[m
[32m+[m[32m    for i, line in enumerate(wrapped_desc):[m[41m[m
         draw.text([m
[31m-            (60, 1300 + 80 * i),[m
[32m+[m[32m            (50, desc_y + (i * desc_font_size * desc_spacing)),[m[41m[m
             line,[m
[31m-            font=capacity_description_font,[m
[32m+[m[32m            font=dynamic_desc_font,[m[41m[m
             stroke_width=1,[m
[31m-            stroke_fill=(0, 0, 0, 255),[m
[32m+[m[32m            stroke_fill=(0, 0, 0, 255)[m[41m[m
         )[m
[32m+[m[41m[m
     draw.text([m
         (320, 1670),[m
         str(ball_instance.health),[m
         font=stats_font,[m
         fill=ball_health,[m
         stroke_width=1,[m
[31m-        stroke_fill=(0, 0, 0, 255),[m
[32m+[m[32m        stroke_fill=(0, 0, 0, 255)[m[41m[m
     )[m
[32m+[m[41m[m
     draw.text([m
         (1120, 1670),[m
         str(ball_instance.attack),[m
[36m@@ -76,21 +129,20 @@[m [mdef draw_card(ball_instance: "BallInstance"):[m
         fill=(252, 194, 76, 255),[m
         stroke_width=1,[m
         stroke_fill=(0, 0, 0, 255),[m
[31m-        anchor="ra",[m
[32m+[m[32m        anchor="ra"[m[41m[m
     )[m
[32m+[m[41m[m
     draw.text([m
[31m-        (30, 1870),[m
[31m-        # Modifying the line below is breaking the licence as you are removing credits[m
[31m-        # If you don't want to receive a DMCA, just don't[m
[31m-        "Created by El Laggron\n" f"Artwork author: {ball.credits}",[m
[32m+[m[32m        (30, 1847),[m[41m[m
[32m+[m[32m        "FanmadeDex owned by Venus\nBallsDex created by El Laggron\n" + f"Monster owner: {ball.credits}",[m[41m[m
         font=credits_font,[m
         fill=(0, 0, 0, 255),[m
         stroke_width=0,[m
[31m-        stroke_fill=(255, 255, 255, 255),[m
[32m+[m[32m        stroke_fill=(255, 255, 255, 255)[m[41m[m
     )[m
 [m
     artwork = Image.open("." + ball.collection_card).convert("RGBA")[m
[31m-    image.paste(ImageOps.fit(artwork, artwork_size), CORNERS[0])  # type: ignore[m
[32m+[m[32m    image.paste(ImageOps.fit(artwork, artwork_size), CORNERS[0])[m[41m[m
 [m
     if icon:[m
         icon = ImageOps.fit(icon, (192, 192))[m
[36m@@ -98,4 +150,4 @@[m [mdef draw_card(ball_instance: "BallInstance"):[m
         icon.close()[m
     artwork.close()[m
 [m
[31m-    return image[m
[32m+[m[32m    return image[m
\ No newline at end of file[m
[1mdiff --git a/ballsdex/core/models.py b/ballsdex/core/models.py[m
[1mindex 6b4af6b..ee0f4d8 100755[m
[1m--- a/ballsdex/core/models.py[m
[1m+++ b/ballsdex/core/models.py[m
[36m@@ -30,10 +30,17 @@[m [masync def lower_catch_names([m
     using_db: "BaseDBAsyncClient | None" = None,[m
     update_fields: Iterable[str] | None = None,[m
 ):[m
[31m-    if instance.catch_names:[m
[31m-        instance.catch_names = ";".join([m
[31m-            [x.strip() for x in instance.catch_names.split(";")][m
[31m-        ).lower()[m
[32m+[m[32m    catch_names = [] if instance.catch_names is None else instance.catch_names.split(";")[m
[32m+[m[41m    [m
[32m+[m[32m    catch_names = [x.strip().lower() for x in catch_names][m
[32m+[m[41m    [m
[32m+[m[32m    if instance.country.lower() not in catch_names:[m
[32m+[m[32m        catch_names.append(instance.country.lower())[m
[32m+[m[41m    [m
[32m+[m[32m    if instance.short_name and instance.short_name.lower() not in catch_names:[m
[32m+[m[32m        catch_names.append(instance.short_name.lower())[m
[32m+[m[41m    [m
[32m+[m[32m    instance.catch_names = ";".join(filter(None, catch_names))[m
 [m
 [m
 class DiscordSnowflakeValidator(validators.Validator):[m
[1mdiff --git a/ballsdex/packages/admin/cog.py b/ballsdex/packages/admin/cog.py[m
[1mindex 6864f32..a74dc3e 100644[m
[1m--- a/ballsdex/packages/admin/cog.py[m
[1m+++ b/ballsdex/packages/admin/cog.py[m
[36m@@ -1144,6 +1144,7 @@[m [mclass Admin(commands.GroupCog):[m
         interaction: discord.Interaction,[m
         *,[m
         name: app_commands.Range[str, None, 48],[m
[32m+[m[32m        short_name: app_commands.Range[str, None, 12] = None,[m
         regime: RegimeTransform,[m
         health: int,[m
         attack: int,[m
[36m@@ -1164,6 +1165,8 @@[m [mclass Admin(commands.GroupCog):[m
         Parameters[m
         ----------[m
         name: str[m
[32m+[m[32m        short_name: str[m
[32m+[m[32m            Optional shortened version of the country name (max 12 chars)[m
         regime: Regime[m
         economy: Economy | None[m
         health: int[m
[36m@@ -1232,6 +1235,7 @@[m [mclass Admin(commands.GroupCog):[m
         try:[m
             ball = await Ball.create([m
                 country=name,[m
[32m+[m[32m                short_name=short_name,[m
                 regime=regime,[m
                 economy=economy,[m
                 health=health,[m
[36m@@ -1262,7 +1266,7 @@[m [mclass Admin(commands.GroupCog):[m
                 f"Successfully created a {settings.collectible_name} with ID {ball.pk}! "[m
                 "The internal cache was reloaded.\n"[m
                 f"{missing_default}\n"[m
[31m-                f"{name=} regime={regime.name} economy={economy.name if economy else None} "[m
[32m+[m[32m                f"{name=} {short_name=} regime={regime.name} economy={economy.name if economy else None} "[m
                 f"{health=} {attack=} {rarity=} {enabled=} {tradeable=} emoji={emoji}",[m
                 files=files,[m
             )[m
[36m@@ -1382,7 +1386,7 @@[m [mclass Admin(commands.GroupCog):[m
                 f"History of {user.display_name} and {user2.display_name}:"[m
             )[m
 [m
[31m-        source = TradeViewFormat(history, user.display_name, self.bot)[m
[32m+[m[32m        source = TradeViewFormat(history, user.display_name, self.bot, True)[m
         pages = Pages(source=source, interaction=interaction)[m
         await pages.start(ephemeral=True)[m
 [m
[36m@@ -1451,7 +1455,7 @@[m [mclass Admin(commands.GroupCog):[m
             await interaction.followup.send("No history found.", ephemeral=True)[m
             return[m
 [m
[31m-        source = TradeViewFormat(trades, f"{settings.collectible_name} {ball}", self.bot)[m
[32m+[m[32m        source = TradeViewFormat(trades, f"{settings.collectible_name} {ball}", self.bot, True)[m
         pages = Pages(source=source, interaction=interaction)[m
         await pages.start(ephemeral=True)[m
 [m
[1mdiff --git a/ballsdex/packages/balls/cog.py b/ballsdex/packages/balls/cog.py[m
[1mindex f4b97d7..64d28ed 100644[m
[1m--- a/ballsdex/packages/balls/cog.py[m
[1m+++ b/ballsdex/packages/balls/cog.py[m
[36m@@ -32,6 +32,9 @@[m [mfrom ballsdex.settings import settings[m
 if TYPE_CHECKING:[m
     from ballsdex.core.bot import BallsDexBot[m
 [m
[32m+[m[32mimport random[m
[32m+[m[32mfrom datetime import datetime, timedelta[m
[32m+[m
 log = logging.getLogger("ballsdex.packages.countryballs")[m
 [m
 [m
[36m@@ -128,9 +131,12 @@[m [mclass Balls(commands.GroupCog, group_name=settings.players_group_cog_name):[m
     View and manage your countryballs collection.[m
     """[m
 [m
[31m-    def __init__(self, bot: "BallsDexBot"):[m
[32m+[m[32m    def __init__(self, bot):[m
         self.bot = bot[m
[32m+[m[32m        self.last_training_times = {}  # Add this line[m
[32m+[m
 [m
[32m+[m[41m    [m
     @app_commands.command()[m
     @app_commands.checks.cooldown(1, 10, key=lambda i: i.user.id)[m
     async def list([m
[36m@@ -552,7 +558,7 @@[m [mclass Balls(commands.GroupCog, group_name=settings.players_group_cog_name):[m
         elif new_player.donation_policy == DonationPolicy.REQUEST_APPROVAL:[m
             await interaction.followup.send([m
                 f"Hey {user.mention}, {interaction.user.name} wants to give you "[m
[31m-                f"{countryball.description(include_emoji=True, bot=self.bot, is_trade=True)}!\n"[m
[32m+[m[32m                f"{countryball.description(include_emoji=True, bot=self.bot, is_trade=True)} (`{countryball.attack_bonus:+}%/{countryball.health_bonus:+}%`)!\n"[m
                 "Do you accept this donation?",[m
                 view=DonationRequest(self.bot, interaction, countryball, new_player),[m
             )[m
[1mdiff --git a/ballsdex/packages/config/cog.py b/ballsdex/packages/config/cog.py[m
[1mindex db73950..3ec3520 100644[m
[1m--- a/ballsdex/packages/config/cog.py[m
[1m+++ b/ballsdex/packages/config/cog.py[m
[36m@@ -24,6 +24,12 @@[m [mactivation_embed = discord.Embed([m
     "**Not respecting these rules will lead to a blacklist**",[m
 )[m
 [m
[32m+[m[32mlowmembers_embed = discord.Embed([m
[32m+[m[32m    colour=0xD90000,[m
[32m+[m[32m    title=f"{settings.bot_name} activation",[m
[32m+[m[32m    description=f"To enable {settings.bot_name} in your server, you need to have at least 10 members.\n\n"[m
[32m+[m[32m    "Please ensure your server meets this requirement before attempting to activate the bot."[m
[32m+[m[32m)[m
 [m
 @app_commands.default_permissions(manage_guild=True)[m
 @app_commands.guild_only()[m
[36m@@ -67,9 +73,14 @@[m [mclass Config(commands.GroupCog):[m
                 f"I need the permission to send embed links in {channel.mention}."[m
             )[m
             return[m
[31m-        await interaction.response.send_message([m
[31m-            embed=activation_embed, view=AcceptTOSView(interaction, channel)[m
[31m-        )[m
[32m+[m[32m        if not guild.member_count < 10:[m
[32m+[m[32m            await interaction.response.send_message([m
[32m+[m[32m                embed=activation_embed, view=AcceptTOSView(interaction, channel)[m
[32m+[m[32m            )[m
[32m+[m[32m        else:[m
[32m+[m[32m            await interaction.response.send_message([m
[32m+[m[32m                embed=lowmembers_embed[m
[32m+[m[32m            )[m
 [m
     @app_commands.command()[m
     async def disable(self, interaction: discord.Interaction):[m
[1mdiff --git a/ballsdex/packages/countryballs/components.py b/ballsdex/packages/countryballs/components.py[m
[1mindex 2420e8c..bdc6bb2 100755[m
[1m--- a/ballsdex/packages/countryballs/components.py[m
[1m+++ b/ballsdex/packages/countryballs/components.py[m
[36m@@ -83,7 +83,7 @@[m [mclass CountryballNamePrompt(Modal, title=f"Catch this {settings.collectible_name[m
             self.button.disabled = True[m
             await interaction.followup.edit_message(self.ball.message.id, view=self.button.view)[m
         else:[m
[31m-            await interaction.response.send_message(f"{interaction.user.mention} Wrong name!")[m
[32m+[m[32m            await interaction.response.send_message(f"{interaction.user.mention} \n Wrong name: {self.name.value}")[m
 [m
     async def catch_ball([m
         self, bot: "BallsDexBot", user: discord.Member[m
[1mdiff --git a/ballsdex/packages/info/cog.py b/ballsdex/packages/info/cog.py[m
[1mindex 54660be..18c3c0a 100644[m
[1m--- a/ballsdex/packages/info/cog.py[m
[1m+++ b/ballsdex/packages/info/cog.py[m
[36m@@ -106,8 +106,12 @@[m [mclass Info(commands.Cog):[m
             f"**{players_count:,}** players that caught "[m
             f"**{balls_instances_count:,}** {settings.collectible_name}s\n"[m
             f"**{len(self.bot.guilds):,}** servers playing\n\n"[m
[31m-            "This bot was made by **El Laggron**, consider supporting me on my "[m
[31m-            "[Patreon](https://patreon.com/retke) :heart:\n\n"[m
[32m+[m
[32m+[m[32m            f"This bot is owned by **Venus**, it has taken a ton of effort to add **{balls_count:,}** monsters, consider subscribing to me on "[m
[32m+[m[32m            "[YouTube](https://www.youtube.com/@venus.kryvak)!\n\n"[m
[32m+[m
[32m+[m[32m            "BallsDex, what FanmadeDex is fully based on was made by **El Laggron**, consider supporting him on his "[m
[32m+[m[32m            "[Patreon](https://patreon.com/retke)!\n\n"[m
             f"[Discord server]({settings.discord_invite}) • [Invite me]({invite_link}) • "[m
             f"[Source code and issues]({settings.github_link})\n"[m
             f"[Terms of Service]({settings.terms_of_service}) • "[m
[1mdiff --git a/ballsdex/packages/rarity/cog.py b/ballsdex/packages/rarity/cog.py[m
[1mindex 398ab51..533ac67 100644[m
[1m--- a/ballsdex/packages/rarity/cog.py[m
[1m+++ b/ballsdex/packages/rarity/cog.py[m
[36m@@ -64,6 +64,14 @@[m [mif TYPE_CHECKING:[m
 log = logging.getLogger("ballsdex.packages.Rarity")[m
 FILENAME_RE = re.compile(r"^(.+)(\.\S+)$")[m
 [m
[32m+[m[32mdef format_rarity(rarity: float) -> str:[m
[32m+[m[32m    if rarity >= 1:[m
[32m+[m[32m        return f"{rarity:.1f}%"[m
[32m+[m[32m    elif rarity >= 0.1:[m
[32m+[m[32m        return f"{rarity:.2f}%"[m
[32m+[m[32m    else:[m
[32m+[m[32m        return f"{rarity:.3f}%"[m
[32m+[m
 class Rarity(commands.GroupCog, name="rarity"):[m
     """[m
     Simple vote commands.[m
[36m@@ -125,66 +133,33 @@[m [mclass Rarity(commands.GroupCog, name="rarity"):[m
         pages = Pages(source=source, interaction=interaction, compact=True)[m
         await pages.start()[m
 [m
[32m+[m
[32m+[m
     [m
[32m+[m
     @app_commands.command()[m
[31m-    @app_commands.checks.cooldown(1, 60, key=lambda i: i.user.id)[m
[31m-    async def seasonals(self, interaction: discord.Interaction):[m
[31m-        # DO NOT CHANGE THE CREDITS TO THE AUTHOR HERE![m
[32m+[m[32m    async def search([m
[32m+[m[32m        self,[m
[32m+[m[32m        interaction: discord.Interaction,[m
[32m+[m[32m        monster: app_commands.Transform[Ball, BallTransform],[m
[32m+[m[32m        shiny: bool = False,[m
[32m+[m[32m    ):[m
         """[m
[31m-        Show the rarity list of the dex - made by GamingadlerHD[m
[32m+[m[32m        View the rarity of a specific monster - created by Venus[m
         """[m
[31m-        # Filter enabled collectibles[m
[31m-        events = [x for x in specials.values()][m
[31m-[m
[31m-        if not events:[m
[31m-            await interaction.response.send_message([m
[31m-                f"There are no events registered in {settings.bot_name} yet.",[m
[31m-                ephemeral=True,[m
[31m-            )[m
[31m-            return[m
[31m-[m
[31m-        # Sort collectibles by rarity in ascending order[m
[32m+[m[41m        [m
[32m+[m[32m        rarity = monster.rarity[m
[32m+[m[41m        [m
[32m+[m[32m        if shiny:[m
[32m+[m[32m            shiny_chance = 1 / 2048[m
[32m+[m[32m            rarity *= shiny_chance[m
[32m+[m[41m        [m
[32m+[m[32m        ball_name = f"Shiny {monster.country}" if shiny else monster.country[m
[32m+[m[32m        formatted_rarity = format_rarity(rarity)[m
         [m
 [m
[31m-        entries = [][m
[31m-[m
[31m-        for special in events:[m
[31m-[m
[31m-            if special.hidden == False:[m
[31m-[m
[31m-                name = f"{special.name}"[m
[31m-                emoji = special.emoji[m
[31m-[m
[31m-                if emoji:[m
[31m-                    emote = str(emoji)[m
[31m-                else:[m
[31m-                    emote = "N/A"[m
[31m-                [m
[31m-                filters = {} [m
[31m-                filters["special"] = special[m
[31m-[m
[31m-                count = await BallInstance.filter(**filters)[m
[31m-                countNum = len(count)[m
[31m-                #sorted_collectibles = sorted(enabled_collectibles.values(), key=lambda x: x.rarity)[m
[31m-                #if you want the Rarity to only show full numbers like 1 or 12 use the code part here:[m
[31m-                # rarity = int(collectible.rarity)[m
[31m-                # otherwise you want to display numbers like 1.5, 5.3, 76.9 use the normal part.[m
[31m-                [m
[31m-[m
[31m-                entry = (name, f"{emote} Count: {countNum}")[m
[31m-                entries.append(entry)[m
[31m-        # This is the number of countryballs who are displayed at one page, [m
[31m-        # you can change this, but keep in mind: discord has an embed size limit.[m
[31m-        per_page = 5 [m
[31m-[m
[31m-        source = FieldPageSource(entries, per_page=per_page, inline=False, clear_description=False)[m
[31m-        source.embed.description = ([m
[31m-            f"__**{settings.bot_name} events rarity**__"[m
[31m-        )[m
[31m-        source.embed.colour = discord.Colour.blurple()[m
[31m-        source.embed.set_author([m
[31m-            name=interaction.user.display_name, icon_url=interaction.user.display_avatar.url[m
[32m+[m[32m        await interaction.response.send_message([m
[32m+[m[32m            f"{ball_name}'s rarity: {formatted_rarity}",[m
[32m+[m[32m            ephemeral=True,[m
         )[m
[31m-[m
[31m-        pages = Pages(source=source, interaction=interaction, compact=True)[m
[31m-        await pages.start()[m
[41m+    [m
[1mdiff --git a/ballsdex/packages/trade/cog.py b/ballsdex/packages/trade/cog.py[m
[1mindex dee581c..57a5aab 100644[m
[1m--- a/ballsdex/packages/trade/cog.py[m
[1m+++ b/ballsdex/packages/trade/cog.py[m
[36m@@ -8,18 +8,19 @@[m [mfrom discord.ext import commands[m
 from discord.utils import MISSING[m
 from tortoise.expressions import Q[m
 [m
[31m-from ballsdex.core.models import Player[m
[32m+[m[32mfrom ballsdex.core.models import BallInstance, Player[m
 from ballsdex.core.models import Trade as TradeModel[m
 from ballsdex.core.utils.buttons import ConfirmChoiceView[m
 from ballsdex.core.utils.paginator import Pages[m
 from ballsdex.core.utils.transformers import ([m
     BallEnabledTransform,[m
     BallInstanceTransform,[m
[32m+[m[32m    BallTransform,[m
     SpecialEnabledTransform,[m
     TradeCommandType,[m
 )[m
 from ballsdex.packages.trade.display import TradeViewFormat[m
[31m-from ballsdex.packages.trade.menu import TradeMenu[m
[32m+[m[32mfrom ballsdex.packages.trade.menu import BulkAddView, TradeMenu[m
 from ballsdex.packages.trade.trade_user import TradingUser[m
 from ballsdex.settings import settings[m
 [m
[36m@@ -36,6 +37,8 @@[m [mclass Trade(commands.GroupCog):[m
         self.bot = bot[m
         self.trades: dict[int, dict[int, list[TradeMenu]]] = defaultdict(lambda: defaultdict(list))[m
 [m
[32m+[m[32m    bulk = app_commands.Group(name="bulk", description="Bulk Commands")[m
[32m+[m
     def get_trade([m
         self,[m
         interaction: discord.Interaction | None = None,[m
[36m@@ -213,6 +216,67 @@[m [mclass Trade(commands.GroupCog):[m
             f"{countryball.countryball.country} added.", ephemeral=True[m
         )[m
 [m
[32m+[m[32m    @bulk.command(name="add", extras={"trade": TradeCommandType.PICK})[m
[32m+[m[32m    async def bulk_add([m
[32m+[m[32m        self,[m
[32m+[m[32m        interaction: discord.Interaction,[m
[32m+[m[32m        ball: BallEnabledTransform | None = None,[m
[32m+[m[32m        shiny: bool | None = None,[m
[32m+[m[32m        special: SpecialEnabledTransform | None = None,[m
[32m+[m[32m    ):[m
[32m+[m[32m        """[m
[32m+[m[32m        Bulk add countryballs to the ongoing trade, with paramaters to aid with searching.[m
[32m+[m
[32m+[m[32m        Parameters[m
[32m+[m[32m        ----------[m
[32m+[m[32m        ball: Ball[m
[32m+[m[32m            The countryball you would like to filter the results to[m
[32m+[m[32m        shiny: bool[m
[32m+[m[32m            Filter the results to shinies[m
[32m+[m[32m        special: Special[m
[32m+[m[32m            Filter the results to a special event[m
[32m+[m[32m        """[m
[32m+[m[32m        await interaction.response.defer(ephemeral=True, thinking=True)[m
[32m+[m[32m        trade, trader = self.get_trade(interaction)[m
[32m+[m[32m        if not trade or not trader:[m
[32m+[m[32m            await interaction.followup.send("You do not have an ongoing trade.", ephemeral=True)[m
[32m+[m[32m            return[m
[32m+[m[32m        if trader.locked:[m
[32m+[m[32m            await interaction.followup.send([m
[32m+[m[32m                "You have locked your proposal, it cannot be edited! "[m
[32m+[m[32m                "You can click the cancel button to stop the trade instead.",[m
[32m+[m[32m                ephemeral=True,[m
[32m+[m[32m            )[m
[32m+[m[32m            return[m
[32m+[m[32m        filters = {}[m
[32m+[m[32m        if ball:[m
[32m+[m[32m            filters["ball"] = ball[m
[32m+[m[32m        if shiny:[m
[32m+[m[32m            filters["shiny"] = shiny[m
[32m+[m[32m        if special:[m
[32m+[m[32m            filters["special"] = special[m
[32m+[m[32m        filters["player__discord_id"] = interaction.user.id[m
[32m+[m[32m        balls = await BallInstance.filter(**filters).prefetch_related("ball", "player")[m
[32m+[m[32m        if not balls:[m
[32m+[m[32m            await interaction.followup.send([m
[32m+[m[32m                f"No {settings.collectible_name}s found.", ephemeral=True[m
[32m+[m[32m            )[m
[32m+[m[32m            return[m
[32m+[m[32m        if len(balls) < 25:[m
[32m+[m[32m            await interaction.followup.send([m
[32m+[m[32m                f"You have less than 25 {settings.collectible_name}s, "[m
[32m+[m[32m                "you can use the add command instead.",[m
[32m+[m[32m                ephemeral=True,[m
[32m+[m[32m            )[m
[32m+[m[32m            return[m
[32m+[m
[32m+[m[32m        view = BulkAddView(interaction, balls, self)  # type: ignore[m
[32m+[m[32m        await view.start([m
[32m+[m[32m            content=f"Select the {settings.collectible_name}s you want to add "[m
[32m+[m[32m            "to your proposal, note that the display will wipe on pagination however "[m
[32m+[m[32m            f"the selected {settings.collectible_name}s will remain."[m
[32m+[m[32m        )[m
[32m+[m
     @app_commands.command(extras={"trade": TradeCommandType.REMOVE})[m
     async def remove([m
         self,[m
[1mdiff --git a/ballsdex/packages/trade/display.py b/ballsdex/packages/trade/display.py[m
[1mindex 304bf2f..d7d60ea 100644[m
[1m--- a/ballsdex/packages/trade/display.py[m
[1m+++ b/ballsdex/packages/trade/display.py[m
[36m@@ -12,9 +12,16 @@[m [mif TYPE_CHECKING:[m
 [m
 [m
 class TradeViewFormat(menus.ListPageSource):[m
[31m-    def __init__(self, entries: Iterable[TradeModel], header: str, bot: "BallsDexBot"):[m
[32m+[m[32m    def __init__([m
[32m+[m[32m        self,[m
[32m+[m[32m        entries: Iterable[TradeModel],[m
[32m+[m[32m        header: str,[m
[32m+[m[32m        bot: "BallsDexBot",[m
[32m+[m[32m        is_admin: bool = False,[m
[32m+[m[32m    ):[m
         self.header = header[m
         self.bot = bot[m
[32m+[m[32m        self.is_admin = is_admin[m
         super().__init__(entries, per_page=1)[m
 [m
     async def format_page(self, menu: Pages, trade: TradeModel) -> discord.Embed:[m
[36m@@ -31,6 +38,7 @@[m [mclass TradeViewFormat(menus.ListPageSource):[m
             self.bot,[m
             await TradingUser.from_trade_model(trade, trade.player1, self.bot),[m
             await TradingUser.from_trade_model(trade, trade.player2, self.bot),[m
[32m+[m[32m            is_admin=self.is_admin,[m
         )[m
         return embed[m
 [m
[36m@@ -81,6 +89,7 @@[m [mdef fill_trade_embed_fields([m
     trader1: TradingUser,[m
     trader2: TradingUser,[m
     compact: bool = False,[m
[32m+[m[32m    is_admin: bool = False,[m
 ):[m
     """[m
     Fill the fields of an embed with the items part of a trade.[m
[36m@@ -110,12 +119,18 @@[m [mdef fill_trade_embed_fields([m
 [m
     # then display the text. first page is easy[m
     embed.add_field([m
[31m-        name=f"{_get_prefix_emote(trader1)} {trader1.user.name}",[m
[32m+[m[32m        name=([m
[32m+[m[32m            f"{_get_prefix_emote(trader1)} {trader1.user.name}"[m
[32m+[m[32m            f" {trader1.user.id if is_admin else ''}"[m
[32m+[m[32m        ),[m
         value=trader1_proposal[0],[m
         inline=True,[m
     )[m
     embed.add_field([m
[31m-        name=f"{_get_prefix_emote(trader2)} {trader2.user.name}",[m
[32m+[m[32m        name=([m
[32m+[m[32m            f"{_get_prefix_emote(trader2)} {trader2.user.name}"[m
[32m+[m[32m            f" {trader2.user.id if is_admin else ''}"[m
[32m+[m[32m        ),[m
         value=trader2_proposal[0],[m
         inline=True,[m
     )[m
[36m@@ -148,12 +163,18 @@[m [mdef fill_trade_embed_fields([m
         else:[m
             embed.clear_fields()[m
             embed.add_field([m
[31m-                name=f"{_get_prefix_emote(trader1)} {trader1.user.name}",[m
[32m+[m[32m                name=([m
[32m+[m[32m                    f"{_get_prefix_emote(trader1)} {trader1.user.name}"[m
[32m+[m[32m                    f" {trader1.user.id if is_admin else ''}"[m
[32m+[m[32m                ),[m
                 value=f"Trade too long, only showing last page:\n{trader1_proposal[-1]}",[m
                 inline=True,[m
             )[m
             embed.add_field([m
[31m-                name=f"{_get_prefix_emote(trader2)} {trader2.user.name}",[m
[32m+[m[32m                name=([m
[32m+[m[32m                    f"{_get_prefix_emote(trader2)} {trader2.user.name}"[m
[32m+[m[32m                    f" {trader2.user.id if is_admin else ''}",[m
[32m+[m[32m                ),[m
                 value=f"Trade too long, only showing last page:\n{trader2_proposal[-1]}",[m
                 inline=True,[m
             )[m
[1mdiff --git a/ballsdex/packages/trade/menu.py b/ballsdex/packages/trade/menu.py[m
[1mindex 5a8c75c..37ddf0d 100644[m
[1m--- a/ballsdex/packages/trade/menu.py[m
[1m+++ b/ballsdex/packages/trade/menu.py[m
[36m@@ -3,12 +3,15 @@[m [mfrom __future__ import annotations[m
 import asyncio[m
 import logging[m
 from datetime import datetime, timedelta[m
[31m-from typing import TYPE_CHECKING, cast[m
[32m+[m[32mfrom typing import TYPE_CHECKING, List, cast[m
 [m
 import discord[m
 from discord.ui import Button, View, button[m
 [m
 from ballsdex.core.models import BallInstance, Trade, TradeObject[m
[32m+[m[32mfrom ballsdex.core.utils import menus[m
[32m+[m[32mfrom ballsdex.core.utils.buttons import ConfirmChoiceView[m
[32m+[m[32mfrom ballsdex.core.utils.paginator import Pages[m
 from ballsdex.packages.trade.display import fill_trade_embed_fields[m
 from ballsdex.packages.trade.trade_user import TradingUser[m
 from ballsdex.settings import settings[m
[36m@@ -336,3 +339,105 @@[m [mclass TradeMenu:[m
 [m
         await self.message.edit(content=None, embed=self.embed, view=self.current_view)[m
         return result[m
[32m+[m
[32m+[m
[32m+[m[32mclass CountryballsSource(menus.ListPageSource):[m
[32m+[m[32m    def __init__(self, entries: List[BallInstance]):[m
[32m+[m[32m        super().__init__(entries, per_page=25)[m
[32m+[m
[32m+[m[32m    async def format_page(self, menu: CountryballsSelector, balls: List[BallInstance]):[m
[32m+[m[32m        menu.set_options(balls)[m
[32m+[m[32m        return True  # signal to edit the page[m
[32m+[m
[32m+[m
[32m+[m[32mclass CountryballsSelector(Pages):[m
[32m+[m[32m    def __init__([m
[32m+[m[32m        self,[m
[32m+[m[32m        interaction: discord.Interaction["BallsDexBot"],[m
[32m+[m[32m        balls: List[BallInstance],[m
[32m+[m[32m        cog: TradeCog,[m
[32m+[m[32m    ):[m
[32m+[m[32m        self.bot = interaction.client[m
[32m+[m[32m        self.interaction = interaction[m
[32m+[m[32m        source = CountryballsSource(balls)[m
[32m+[m[32m        super().__init__(source, interaction=interaction)[m
[32m+[m[32m        self.add_item(self.select_ball_menu)[m
[32m+[m[32m        self.add_item(self.confirm_button)[m
[32m+[m[32m        self.add_item(self.clear_button)[m
[32m+[m[32m        self.balls_selected: List[BallInstance] = [][m
[32m+[m[32m        self.cog = cog[m
[32m+[m
[32m+[m[32m    def set_options(self, balls: List[BallInstance]):[m
[32m+[m[32m        options: List[discord.SelectOption] = [][m
[32m+[m[32m        for ball in balls:[m
[32m+[m[32m            emoji = self.bot.get_emoji(int(ball.countryball.emoji_id))[m
[32m+[m[32m            favorite = "❤️ " if ball.favorite else ""[m
[32m+[m[32m            shiny = "✨ " if ball.shiny else ""[m
[32m+[m[32m            special = ball.special_emoji(self.bot, True)[m
[32m+[m[32m            options.append([m
[32m+[m[32m                discord.SelectOption([m
[32m+[m[32m                    label=f"{favorite}{shiny}{special}#{ball.pk:0X} {ball.countryball.country}",[m
[32m+[m[32m                    description=f"ATK: {ball.attack_bonus:+d}% • HP: {ball.health_bonus:+d}% • "[m
[32m+[m[32m                    f"Caught on {ball.catch_date.strftime('%d/%m/%y %H:%M')}",[m
[32m+[m[32m                    emoji=emoji,[m
[32m+[m[32m                    value=f"{ball.pk}",[m
[32m+[m[32m                    default=ball in self.balls_selected,[m
[32m+[m[32m                )[m
[32m+[m[32m            )[m
[32m+[m[32m        self.select_ball_menu.options = options[m
[32m+[m
[32m+[m[32m    @discord.ui.select(min_values=1, max_values=25)[m
[32m+[m[32m    async def select_ball_menu(self, interaction: discord.Interaction, item: discord.ui.Select):[m
[32m+[m[32m        for value in item.values:[m
[32m+[m[32m            ball_instance = await BallInstance.get(id=int(value)).prefetch_related([m
[32m+[m[32m                "ball", "player"[m
[32m+[m[32m            )[m
[32m+[m[32m            self.balls_selected.append(ball_instance)[m
[32m+[m[32m        await interaction.response.defer()[m
[32m+[m
[32m+[m[32m    @discord.ui.button(label="Confirm", style=discord.ButtonStyle.primary)[m
[32m+[m[32m    async def confirm_button(self, interaction: discord.Interaction, button: Button):[m
[32m+[m[32m        await interaction.response.defer(thinking=True, ephemeral=True)[m
[32m+[m[32m        trade, trader = self.cog.get_trade(interaction)[m
[32m+[m[32m        if trade is None or trader is None:[m
[32m+[m[32m            return await interaction.followup.send([m
[32m+[m[32m                "The trade has been cancelled or the user is not part of the trade.",[m
[32m+[m[32m                ephemeral=True,[m
[32m+[m[32m            )[m
[32m+[m[32m        if trader.locked:[m
[32m+[m[32m            return await interaction.followup.send([m
[32m+[m[32m                "You have locked your proposal, it cannot be edited! "[m
[32m+[m[32m                "You can click the cancel button to stop the trade instead.",[m
[32m+[m[32m                ephemeral=True,[m
[32m+[m[32m            )[m
[32m+[m[32m        if any(ball in trader.proposal for ball in self.balls_selected):[m
[32m+[m[32m            return await interaction.followup.send([m
[32m+[m[32m                f"You have already added some of the {settings.collectible_name}s you selected.",[m
[32m+[m[32m                ephemeral=True,[m
[32m+[m[32m            )[m
[32m+[m
[32m+[m[32m        for ball in self.balls_selected:[m
[32m+[m[32m            trader.proposal.append(ball)[m
[32m+[m[32m            await ball.lock_for_trade()[m
[32m+[m[32m        await interaction.followup.send([m
[32m+[m[32m            f"{len(self.balls_selected)} {settings.collectible_name.title()}s added to your proposal.",[m
[32m+[m[32m            ephemeral=True,[m
[32m+[m[32m        )[m
[32m+[m[32m        self.balls_selected.clear()[m
[32m+[m
[32m+[m[32m    @discord.ui.button(label="Clear", style=discord.ButtonStyle.danger)[m
[32m+[m[32m    async def clear_button(self, interaction: discord.Interaction, button: Button):[m
[32m+[m[32m        await interaction.response.defer(thinking=True, ephemeral=True)[m
[32m+[m[32m        self.balls_selected.clear()[m
[32m+[m[32m        await interaction.followup.send([m
[32m+[m[32m            f"You have cleared all currently selected {settings.collectible_name}s."[m
[32m+[m[32m            f"This does not affect {settings.collectible_name}s within your trade.\n"[m
[32m+[m[32m            "There may be an instance where it shows balls on the current page as selected, "[m
[32m+[m[32m            "this is not the case - changing page will show the correct state.",[m
[32m+[m[32m            ephemeral=True,[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m
[32m+[m[32mclass BulkAddView(CountryballsSelector):[m
[32m+[m[32m    async def on_timeout(self) -> None:[m
[32m+[m[32m        return await super().on_timeout()[m
